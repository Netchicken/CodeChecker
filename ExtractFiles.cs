using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeChecker
{
    using System.IO;
    using System.Windows.Forms;

    public static class ExtractFiles
    {
        public static Boolean isHTML = false;
        public static Boolean isJS = false;
        public static Boolean isCSS = false;
        public static Boolean isCSharp = false;
        public static Boolean isIncluded = false;
        public static Boolean isSameFolder = false;

        public static string docPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

        //files and their contents added to the dictionary
        public static Dictionary<string, string> AllFiles = new Dictionary<string, string>();


        public static async Task ExtractFilePaths()
        { //files and their contents added to the dictionary
            if (isHTML)
            {
                ExtractHTML();
                //  await Task.Run(() => ExtractHTML()).ConfigureAwait(false);
            }
            if (isCSharp)
            {
                ExtractCSharp();
                //await Task.Run(() => ExtractCSharp()).ConfigureAwait(false);
            }
            if (isJS)
            {
                ExtractJS();
                //  await Task.Run(() => ExtractJS()).ConfigureAwait(false);
            }
            if (isCSS)
            {
                ExtractCSS();
                //await Task.Run(() => ExtractCSS()).ConfigureAwait(false);
            }

        }
        /// <summary>
        /// Not merging these files in case I have to modify the filter parameters
        /// </summary>
        private static void ExtractCSharp()
        {
            var files = Directory.EnumerateFiles(docPath, "*.cs", SearchOption.AllDirectories);


            foreach (var f in files)
            {
                //filter the folders from the path C#
                if (isCSharp && !f.Contains("Debug") && !f.Contains(".vs") && !f.Contains("packages") && !f.Contains("obj") &&
                    !f.Contains("Properties") && !f.Contains("Resources") && !f.Contains("Program.cs"))
                {
                    string text = File.ReadAllText(f).ToLower();

                    //filter the file content
                    if (!string.IsNullOrEmpty(text) && !text.Contains("<auto-generated>"))
                    {
                        AllFiles.Add(f, text);
                    }
                }
            }

        }

        private static void ExtractHTML()
        {
            var files = Directory.EnumerateFiles(docPath, "*.html", SearchOption.AllDirectories);

            foreach (var f in files)
            {
                //filter the folders from the path C#
                if (isCSharp && !f.Contains("Debug") && !f.Contains("packages") && !f.Contains("obj") &&
                    !f.Contains("Properties") && !f.Contains("Resources"))
                {
                    string text = File.ReadAllText(f).ToLower();

                    //filter the file content
                    if (!string.IsNullOrEmpty(text) && !text.Contains("<auto-generated>"))
                    {
                        AllFiles.Add(f, text);
                    }
                }
            }


        }
        private static void ExtractJS()
        {
            var files = Directory.EnumerateFiles(docPath, "*.js", SearchOption.AllDirectories);

            foreach (var f in files)
            {
                //filter the folders from the path C#
                if (isCSharp && !f.Contains("Debug") && !f.Contains("packages") && !f.Contains("obj") &&
                    !f.Contains("Properties") && !f.Contains("Resources"))
                {
                    string text = File.ReadAllText(f).ToLower();

                    //filter the file content
                    if (!string.IsNullOrEmpty(text) && !text.Contains("<auto-generated>"))
                    {
                        AllFiles.Add(f, text);
                    }
                }
            }

        }
        private static void ExtractCSS()
        {
            var files = Directory.EnumerateFiles(docPath, "*.css", SearchOption.AllDirectories);

            foreach (var f in files)
            {
                //filter the folders from the path C#
                if (isCSharp && !f.Contains("Debug") && !f.Contains("packages") && !f.Contains("obj") &&
                    !f.Contains("Properties") && !f.Contains("Resources"))
                {
                    string text = File.ReadAllText(f).ToLower();

                    //filter the file content
                    if (!string.IsNullOrEmpty(text) && !text.Contains("<auto-generated>"))
                    {
                        AllFiles.Add(f, text);
                    }
                }
            }


        }




    }
}
