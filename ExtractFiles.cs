using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;

namespace CodeChecker
{

    public static class ExtractFiles
    {
        public static Boolean isHTML = false;
        public static Boolean isJS = false;
        public static Boolean isCSS = false;
        public static Boolean isCSharp = false;
        public static Boolean isIncluded = false;
        public static Boolean isSameFolder = false;
        public static Boolean isGuid = false;

        public static string docPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

        //todo Make allfiles local return out Ienum and work out how to have it as a task

        //files and their contents added to the dictionary
        public static Dictionary<string, string> AllFiles = new Dictionary<string, string>();

        //.ConfigureAwait(false) prevents deadlocks in your calls;

        public static async Task ExtractFilePaths()
        {
            Dictionary<string, string> AllLocalFiles = new Dictionary<string, string>();
            //https://stackoverflow.com/questions/33234614/how-to-return-a-result-from-an-async-task

            //files and their contents added to the dictionary
            if (isHTML)
            {
                await Task.Run(() => ExtractHTML()).ConfigureAwait(false);
            }
            if (isCSharp)
            {
                await Task.Run(() => ExtractCSharp()).ConfigureAwait(false);
            }
            if (isJS)
            {
                await Task.Run(() => ExtractJS()).ConfigureAwait(false);
            }
            if (isCSS)
            {
                await Task.Run(() => ExtractCSS()).ConfigureAwait(false);
            }
            if (isGuid)
            {
                await Task.Run(() => ExtractGuid()).ConfigureAwait(false);
            }

        }
        /// <summary>
        /// Not merging these files in case I have to modify the filter parameters
        /// </summary>Dictionary<string, string> AllFiles
        private static void ExtractCSharp()
        {
            var files = Directory.EnumerateFiles(docPath, "*.cs", SearchOption.AllDirectories);


            foreach (var f in files)
            {
                //filter the folders from the path C#
                if (isCSharp && !f.Contains("Debug") && !f.Contains(".vs") && !f.Contains("packages") && !f.Contains("obj") &&
                    !f.Contains("Properties") && !f.Contains("Resources") && !f.Contains("Program.cs"))
                {
                    string text = File.ReadAllText(f).ToLower();

                    //filter the file content
                    if (!AllFiles.ContainsKey(f) && !string.IsNullOrEmpty(text) && !text.Contains("<auto-generated>"))
                    {
                        AllFiles.Add(f, text);
                    }
                }
            }
            // return AllFiles;
        }

        private static void ExtractHTML()
        {

            var files = Directory.EnumerateFiles(docPath, "*.html*", SearchOption.AllDirectories);


            foreach (var f in files)
            {
                //filter the folders from the path C#
                //if (isCSharp && !f.Contains("Debug") && !f.Contains("packages") && !f.Contains("obj") &&
                //    !f.Contains("Properties") && !f.Contains("Resources"))
                //{
                string text = File.ReadAllText(f).ToLower();

                //filter the file content
                if (!AllFiles.ContainsKey(f) && !string.IsNullOrEmpty(text) && !text.Contains("<auto-generated>"))
                {
                    AllFiles.Add(f, text);
                }
                //}
            }


        }
        private static void ExtractJS()
        {
            var files = Directory.EnumerateFiles(docPath, "*.js", SearchOption.AllDirectories);

            foreach (var f in files)
            {
                //filter the folders from the path C#
                //if (isCSharp && !f.Contains("Debug") && !f.Contains("packages") && !f.Contains("obj") &&
                //    !f.Contains("Properties") && !f.Contains("Resources"))
                //{
                string text = File.ReadAllText(f).ToLower();

                //filter the file content
                if (!AllFiles.ContainsKey(f) && !string.IsNullOrEmpty(text) && !text.Contains("<auto-generated>"))
                {
                    AllFiles.Add(f, text);
                }
                //  }
            }

        }
        private static void ExtractCSS()
        {
            var files = Directory.EnumerateFiles(docPath, "*.css", SearchOption.AllDirectories);

            foreach (var f in files)
            {
                //filter the folders from the path C#
                //if (isCSharp && !f.Contains("Debug") && !f.Contains("packages") && !f.Contains("obj") &&
                //    !f.Contains("Properties") && !f.Contains("Resources"))
                //{
                string text = File.ReadAllText(f).ToLower();

                //filter the file content
                if (!AllFiles.ContainsKey(f) && !string.IsNullOrEmpty(text) && !text.Contains("<auto-generated>"))
                {
                    AllFiles.Add(f, text);
                }
                // }
            }


        }

        private static void ExtractGuid()
        {
            //Get the csproj files
            var files = Directory.EnumerateFiles(docPath, "*.csproj", SearchOption.AllDirectories);

            foreach (var filePath in files)
            {
                //filter the folders from the path C#
                //don't need this but the overhead is really low.
                var text = File.ReadAllText(filePath).ToLower();

                //filter the file content
                if (!AllFiles.ContainsKey(filePath) && !string.IsNullOrEmpty(text) && !text.Contains("<auto-generated>"))
                {

                    //go through each lne
                    foreach (var line in File.ReadLines(filePath))
                    {
                        //<ProjectGuid>{DCCB6F68-8A53-4256-91D8-2A82EA8CDC05}</ProjectGuid>
                        if (line.Contains("ProjectGuid"))
                        {
                            int startIndex = line.IndexOf("{");
                            int endIndex = line.IndexOf("}");
                            int length = endIndex - startIndex;

                            string Guid = line.Substring(startIndex, length);
                            AllFiles.Add(filePath + " " + Guid, Guid);
                            break;  //once you find it stop processing that page
                        }

                     
                    }

                }
                // }
            }

        }

    }
}
